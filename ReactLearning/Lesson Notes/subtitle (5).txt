Welcome to Testing React Components.
After watching this video, you will be able to: Explain what is testing.
List the advantages and disadvantages of testing. Describe the different
approaches of component testing. And describe the testing tools. Testing is a line-by-line review of how your code will execute. Testing can also be done using a suite of tests for an application that comprises various
bits of code to verify whether an application is executing successfully and without error. Testing is essential but has certain advantages and disadvantages. The advantages are that: It prevents unexpected regression.
Then it also allows the developer to focus on the current task rather than worrying about the past.
In addition, it allows modular construction of an application that would
otherwise be too complex to build. And it reduces the need for manual verification.
The disadvantages are that: You need to write more code, as well
as debug and maintain the code and non-critical test failures might cause the
application to be rejected in terms of continuous integration. Testing of React components is done
to ensure that your application will work as intended for your end users.
The test verifies the code prepared by the developers to check that it runs without errors.
Testing also tests the functionality of the application by replicating
the actions of the end users. You should also conduct tests to verify that
any updates done on the application do not affect the overall working of the application.
Testing your application also prevents regression, which is the reappearance of a bug
that had been previously fixed. This can make the feature stop functioning as
intended when a certain event occurs. Now, there are two approaches
to React component testing: You can render component trees in a simple
test environment and assert their output. This kind of unit testing involves an isolated
part of your application. It is done in combination with shallow rendering. For example,
a component can render with default properties. The second approach requires the running
of a complete application in a realistic browser environment, also known as “end-to-end”
testing. This involves a multi-step test that combines multiple units and integrates the
tests into one big test. Tests are done in a simulated browser. There may or may not be
a UI while the test is running. For example, testing an entire authentication flow.
Component tests flow through three phases: Arrange: During this phase, the
component properties are prepared. Act: In this phase, the component needs
to render its DOM to the user interface. It then registers any user actions or
events that may trigger programmatically. And Assert: Finally, the expectations are
set, verifying certain side effects over the component markup.
This form of unit testing is known as Arrange-Act-Assert. When choosing testing tools, it is worth considering the following points:
Speed vs. environment: Some tools offer a very quick feedback loop between making a change
and seeing the result but do not model the browser behavior precisely. Other tools might
use a real browser environment but reduce the iteration speed and are unreliable
on a continuous integration server. Then there's what to mock: With components, the difference
between a “unit” and “integration” test can be indistinct. If you’re testing a form, should it
also test the buttons of the form? Or should a button component have its own test suite? Should
refactoring a button ever break the form test? There are various testing libraries
for your React components. The react ecosystem with a Node.js
background has Mocha, Chai, and Sinon to test JavaScript applications. Mocha is used as the test runner.
Chai can be the assertion library. and Sinon can be used optionally to test your
JavaScript logic with objects such as spies, stubs, and mocks. These objects are pieces of code
that can be used for different types of testing. All three testing libraries can be
used to test React applications. Though there is another library called
Enzyme that is added to the mix to render your React components. Now, you can test React components by using: Jest or
React testing Library Jest was released by Facebook to test
React components and brings the combined power of Mocha, Chai, Sinon, and more.
React Testing Library is a set of helpers that let you test React components without
depending on their implementation details. Jest is a JavaScript test runner,
assertion library and offers spies, stubs, and mocks as well.
Jest can be combined with Enzyme or React Testing Library to test your
React components in an even more powerful way. It allows you to access the DOM via
jsdom for testing React components. Jest provides a great iteration speed
combined with powerful features like mocking modules and timers, so you can have
more control over how the code executes. Jest includes a command line
tool for test execution. It also allows us to create mock functions
with almost zero configuration and makes assertions easier to read.
Furthermore, it offers “snapshot testing,” which helps us check and
verify the component rendering result. Jest is installed as a dependency to
React when using npx-create-react-app, along with the React Testing Library.
React Testing Library provides light utility functions on top of react-dom
and react-dom or test-utils in a way that encourages better testing practices.
The utilities provided by this library facilitate querying the DOM, finding form
elements by their labels, and finding links and buttons from their text like a user would.
It also exposes a recommended way to find elements where the text content
and label are not understandable. This library encourages your applications to
be more accessible and allows you to test your components the way the end user will use them.
This library is a replacement for Enzyme. This example shows how to use React
testing library to test components. The test code above used React Testing Library's
render method to render the component virtually. You can access the rendered
HTML through the screen object. The primary purpose of React Testing Library
is to increase confidence in your tests by testing your components in the same way
as an end user would use the components. Users are unaware of the backend of an
application and are aware of only the output. This library enables you to write
your tests based on the component output. Rewriting your tests in React Testing Library
is worthwhile because you'll be trading tests that slow you down for tests that give
you more confidence and increase your productivity in the long run. In this video, you learned that: Testing is a line-by-line review
of how your code will execute. You can render component trees in a simple test
environment or a realistic browser environment. Component tests flow through three
phases: Arrange, Act, and Assert. React components can be tested using Mocha,
Chai, Sinon, Jest, and React Testing Library. And finally, React Testing Library
increases confidence in your tests by testing your components in the same
way as an end user would use the components.